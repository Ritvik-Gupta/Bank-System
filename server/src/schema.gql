# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Customer {
  profileId: ID!
  address: String!
  asProfile: Profile!
  havingAccounts: [Account!]!
}

type ProfileHollow {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  accessToken: String!
}

type Profile {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: String!
  accessToken: String!
}

type Employee {
  profileId: ID!
  bankId: ID!
  asProfile: Profile!
  worksAt: Bank!
}

type BankHollow {
  id: ID!
  name: String!
  address: String!
}

type Bank {
  id: ID!
  name: String!
  address: String!
  employees: [Employee!]!
  accounts: [Account!]!
}

type AccountHollow {
  customerId: ID!
  bankId: ID!
  accountType: AccountType!
  createDate: DateTime!
}

enum AccountType {
  SAVINGS
  FIXED
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Account {
  customerId: ID!
  bankId: ID!
  accountType: AccountType!
  createDate: DateTime!
  forCustomer: Customer!
  withBank: Bank!
}

type Query {
  fetchAllProfiles: [Profile!]!
  currentProfile: Profile
  fetchOneEmployee(employeeId: ID!): Employee!
  fetchAllBanks: [Bank!]!
  fetchOneBank(id: ID!): Bank!
}

type Mutation {
  login(login: ProfileLoginInput!): ProfileHollow!
  registerEmployee(profile: ProfileInput!, employee: EmployeeInput!): ProfileHollow!
  registerCustomer(profile: ProfileInput!, customer: CustomerInput!): ProfileHollow!
  createBank(bank: BankInput!): BankHollow!
  createAccount(account: AccountInput!): AccountHollow!
}

input ProfileLoginInput {
  email: String!
  password: String!
}

input ProfileInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
}

input EmployeeInput {
  bankId: String!
}

input CustomerInput {
  address: String!
}

input BankInput {
  name: String!
  address: String!
}

input AccountInput {
  bankId: String!
  accountType: AccountType!
}
